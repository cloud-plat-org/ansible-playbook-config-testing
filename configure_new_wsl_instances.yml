---
- name: Configure new WSL instances for AWX management
  hosts: ubuntuAWX,argo_cd_mgt
  become: true
  become_method: sudo
  gather_facts: true
  vars:
    # Users configuration
    awx_user: "daniv"
    
    # Sudoers configuration options
    sudoers_type: "full"  # Options: "full", "systemctl", "minimal"
    
    # Essential packages to install
    essential_packages:
      - curl
      - wget
      - git
      - vim
      - jq
      - openssl
      - htop
      - tree
      - unzip

  tasks:
    - name: Display target host information
      debug:
        msg: |
          Configuring host: {{ inventory_hostname }}
          Hostname: {{ ansible_hostname | default('unknown') }}
          OS: {{ ansible_distribution | default('unknown') }} {{ ansible_distribution_version | default('') }}
          SSH Port: {{ ansible_port | default('22') }}

    - name: Update package cache
      apt:
        update_cache: true
        cache_valid_time: 3600
      register: apt_update
      failed_when: false

    - name: Upgrade system packages
      apt:
        upgrade: safe
        autoremove: true
        autoclean: true
      register: apt_upgrade
      failed_when: false

    - name: Install essential packages
      apt:
        name: "{{ essential_packages }}"
        state: present
      register: package_install
      failed_when: false

    - name: Configure passwordless sudo (Full access)
      copy:
        content: "{{ awx_user }} ALL=(ALL) NOPASSWD: ALL\n"
        dest: "/etc/sudoers.d/{{ awx_user }}-nopasswd"
        mode: '0440'
        owner: root
        group: root
        validate: 'visudo -cf %s'
      when: sudoers_type == "full"
      register: sudoers_full

    - name: Configure passwordless sudo (systemctl only)
      copy:
        content: |
          {{ awx_user }} ALL=(ALL) NOPASSWD: /bin/systemctl stop *, /bin/systemctl start *, /bin/systemctl restart *, /bin/systemctl status *, /bin/systemctl enable *, /bin/systemctl disable *
        dest: "/etc/sudoers.d/{{ awx_user }}-systemctl"
        mode: '0440'
        owner: root
        group: root
        validate: 'visudo -cf %s'
      when: sudoers_type == "systemctl"
      register: sudoers_systemctl

    - name: Configure passwordless sudo (minimal - service management only)
      copy:
        content: |
          {{ awx_user }} ALL=(ALL) NOPASSWD: /bin/systemctl stop cron, /bin/systemctl start cron, /bin/systemctl restart cron, /bin/systemctl status cron
          {{ awx_user }} ALL=(ALL) NOPASSWD: /bin/systemctl stop systemd-resolved, /bin/systemctl start systemd-resolved, /bin/systemctl restart systemd-resolved, /bin/systemctl status systemd-resolved
          {{ awx_user }} ALL=(ALL) NOPASSWD: /bin/systemctl stop systemd-networkd, /bin/systemctl start systemd-networkd, /bin/systemctl restart systemd-networkd, /bin/systemctl status systemd-networkd
        dest: "/etc/sudoers.d/{{ awx_user }}-minimal"
        mode: '0440'
        owner: root
        group: root
        validate: 'visudo -cf %s'
      when: sudoers_type == "minimal"
      register: sudoers_minimal

    - name: Test passwordless sudo access
      command: sudo -n whoami
      become: false
      register: sudo_test
      failed_when: false
      changed_when: false

    - name: Verify SSH service is running
      systemd:
        name: ssh
        state: started
        enabled: true
      register: ssh_service

    - name: Get SSH service status
      command: systemctl status ssh --no-pager -l
      register: ssh_status
      changed_when: false
      failed_when: false

    - name: Verify SSH is listening on correct port
      command: "netstat -tlnp | grep :{{ ansible_port | default('22') }}"
      register: ssh_port_check
      changed_when: false
      failed_when: false

    - name: Create system info summary
      set_fact:
        system_summary:
          hostname: "{{ ansible_hostname | default('unknown') }}"
          distribution: "{{ ansible_distribution | default('unknown') }} {{ ansible_distribution_version | default('') }}"
          ssh_port: "{{ ansible_port | default('22') }}"
          ssh_service: "{{ ssh_service.state | default('unknown') }}"
          sudo_access: "{{ sudo_test.rc == 0 }}"
          packages_updated: "{{ package_install.changed | default(false) }}"
          sudoers_configured: "{{ (sudoers_full.changed | default(false)) or (sudoers_systemctl.changed | default(false)) or (sudoers_minimal.changed | default(false)) }}"

    - name: Display configuration summary
      debug:
        msg: |
          [SUCCESS] Configuration Summary for {{ inventory_hostname }}:
          
          System:  System: {{ system_summary.hostname }} ({{ system_summary.distribution }})
          SSH Port: SSH Port: {{ system_summary.ssh_port }}
          SSH Service: SSH Service: {{ system_summary.ssh_service }}
          Sudo Access: Sudo Access: {{ system_summary.sudo_access }}
          Packages Updated: Packages Updated: {{ system_summary.packages_updated }}
          Sudoers Configured:  Sudoers Configured: {{ system_summary.sudoers_configured }}
          
          Status: Ready for AWX service management! 

- name: Test service management capabilities
  hosts: ubuntuAWX,argo_cd_mgt
  become: true
  become_method: sudo
  gather_facts: false
  vars:
    test_service: "cron"
    
  tasks:
    - name: Test service management - Get current status
      systemd:
        name: "{{ test_service }}"
      register: initial_status
      failed_when: false

    - name: Test service management - Stop service
      systemd:
        name: "{{ test_service }}"
        state: stopped
      register: stop_result
      failed_when: false

    - name: Test service management - Start service  
      systemd:
        name: "{{ test_service }}"
        state: started
      register: start_result
      failed_when: false

    - name: Test service management - Verify final status
      systemd:
        name: "{{ test_service }}"
      register: final_status
      failed_when: false

    - name: Display service management test results
      debug:
        msg: |
          Service Management Test Results Service Management Test Results for {{ inventory_hostname }}:
          
          Service: {{ test_service }}
          Initial State: {{ initial_status.status.ActiveState | default('unknown') }}
          Stop Operation: {{ 'SUCCESS' if stop_result.changed else 'FAILED' }}
          Start Operation: {{ 'SUCCESS' if start_result.changed else 'FAILED' }}
          Final State: {{ final_status.status.ActiveState | default('unknown') }}
          
          Result: {{ 'PASS [SUCCESS]' if (final_status.status.ActiveState == 'active') else 'FAIL FAIL' }}
